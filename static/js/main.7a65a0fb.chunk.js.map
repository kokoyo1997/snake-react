{"version":3,"sources":["constants.js","tools.js","component/Square.js","component/Board.js","component/InfoWrapper.js","component/Control.js","component/Game.js","index.js"],"names":["GRID_SIZE","DIRECTIONS","DIRECTION_TICKS","UP","x","y","BOTTOM","RIGHT","LEFT","KEY_CODES_MAPPER","GAMESTATE","getRandomNumberFromRange","min","max","Math","floor","random","getRandomCoordinate","getRandomFood","snake","food","forEach","ele","getCurTime","d","Date","h","getHours","m","getMinutes","length","getHighest","score","localStorage","getItem","undefined","idx2Loc","idx","getSnakeHead","Square","squareType","isSnake","isFood","className","Board","Array","fill","map","InfoWrapper","time","hs","gs","Control","handleControl","handleProcess","name","onClick","Game","useState","setTime","highScore","setHighScore","setSnake","setFood","setScore","direction","setDirection","gameState","setGameState","handleKeyBoardControl","keyCode","useEffect","window","addEventListener","removeEventListener","timer","setInterval","cur","new_head","new_snake","unshift","head","hitBorder","setItem","updateHighest","clearInterval","eatSelfIdx","i","eatSelf","prev","slice","eatFood","pop","now","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a65a0fb.chunk.js","sourcesContent":["//�������и���\r\nexport const GRID_SIZE = 20;\r\n\r\n//�ߵ�����ǰ������\r\nexport const DIRECTIONS = {\r\n    UP: 'UP',\r\n    BOTTOM: 'BOTTOM',\r\n    RIGHT: 'RIGHT',\r\n    LEFT: 'LEFT',\r\n};\r\n\r\n//���ַ��������仯\r\nexport const DIRECTION_TICKS = {\r\n    UP: (x, y) => ({ x, y: y - 1 }),\r\n    BOTTOM: (x, y) => ({ x, y: y + 1 }),\r\n    RIGHT: (x, y) => ({ x: x + 1, y }),\r\n    LEFT: (x, y) => ({ x: x - 1, y }),\r\n};\r\n  \r\n//����codeֵ\r\nexport const KEY_CODES_MAPPER = {\r\n    38: 'UP',\r\n    39: 'RIGHT',\r\n    37: 'LEFT',\r\n    40: 'BOTTOM',\r\n};\r\n\r\nexport const GAMESTATE={\r\n    READY:'ready',\r\n    RUN:'run',\r\n    PAUSE:'pause',\r\n    OVER:'over'\r\n};","import {\r\n    GRID_SIZE\r\n} from \"./constants\";\r\n\r\n//��ָ����[min,max]�ڲ���һ���������\r\nconst getRandomNumberFromRange = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n//��ȡһ��������꣨���ڲ���ʳ����߳�ʼλ��\r\nexport const getRandomCoordinate = () => {\r\n    return {\r\n        x: getRandomNumberFromRange(0, GRID_SIZE - 1),\r\n        y: getRandomNumberFromRange(0, GRID_SIZE - 1)\r\n    }\r\n}\r\n//����ʳ��պó�����������\r\nexport const getRandomFood = (snake) => {\r\n    let food = getRandomCoordinate();\r\n    snake.forEach(ele => {\r\n        if (food.x === ele.x && food.y === ele.y) food = getRandomFood(snake);\r\n    });\r\n    return food;\r\n}\r\n\r\n//��ȡ����ʱ��\r\nexport const getCurTime = () => {\r\n    let d = new Date();\r\n    let h = \"\" + d.getHours(),\r\n        m = \"\" + d.getMinutes();\r\n    let res = (h.length === 2 ? h : \"0\" + h) + \":\" + (m.length === 2 ? m : \"0\" + m);\r\n    return res;\r\n}\r\n\r\n//��ȡ�������¼�����߷�\r\nexport const getHighest = () => {\r\n    let score = localStorage.getItem(\"snake-hs\");\r\n    return score == undefined ? 0 : score;\r\n}\r\n//ˢ����߷�\r\nexport const updateHighest = (score, hs) => {\r\n    let max = Math.max(hs, score);\r\n    localStorage.setItem(\"snake-hs\", max);\r\n}\r\n//��������->����\r\nconst idx2Loc = (idx) => {\r\n    return [idx % GRID_SIZE, Math.floor(idx / GRID_SIZE)];\r\n}\r\n//��������->����\r\nconst loc2Idx = (x, y) => {\r\n    return y * GRID_SIZE + x;\r\n}\r\n//���������ж��ǲ����߸�\r\nexport const isSnake = (idx, snake) => {\r\n    let [x, y] = idx2Loc(idx);\r\n    for (let ele of snake) {\r\n        if (ele.x === x && ele.y === y) return true;\r\n    }\r\n    return false;\r\n}\r\n//���������ж��ǲ���ʳ���\r\nexport const isFood = (idx, food) => {\r\n    let [x, y] = idx2Loc(idx);\r\n    if (food.x === x && food.y === y) return true;\r\n    return false;\r\n}\r\n//��ȡ��ͷ����\r\nexport const getSnakeHead = (snake) => {\r\n    return snake[0];\r\n}\r\n\r\n//�Ƿ�ײǽ\r\nexport const hitBorder = snake => {\r\n    let head = getSnakeHead(snake);\r\n    if (head.x < 0 || head.y < 0 || head.x >= GRID_SIZE || head.y >= GRID_SIZE) return true;\r\n    return false;\r\n}\r\n//�Ƿ�Ե��Լ�\r\nexport const eatSelf = snake => {\r\n    let head = getSnakeHead(snake);\r\n    for (let i = snake.length-1; i > 0; i--) {\r\n        if (head.x === snake[i].x && head.y === snake[i].y) return i;\r\n    }\r\n    return -1;\r\n}\r\n\r\n//�Ƿ�Ե�ʳ��\r\nexport const eatFood = (snake,food) => {\r\n    let head=getSnakeHead(snake);\r\n    if(head.x===food.x&&head.y===food.y) return true;\r\n    return false\r\n}","import { isSnake, isFood } from \"../tools\";\r\n\r\nfunction Square({snake,food,idx}){\r\n    let squareType=\"square\";\r\n    if(isSnake(idx,snake)) squareType+=\" snake\";\r\n    else if(isFood(idx,food)) squareType+=\" food\";\r\n    return (\r\n        <div className={squareType}></div>\r\n    )\r\n}\r\nexport default Square;","import Square from \"./Square\";\r\nfunction Board({snake,food}){\r\n    return (\r\n        <div className=\"board\">\r\n            {new Array(400).fill(null).map((ele,idx)=>(\r\n                <Square \r\n                    key={idx}\r\n                    snake={snake}\r\n                    food={food}\r\n                    idx={idx}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default Board;","function InfoWrapper({time,score,hs,gs}){\r\n    return (\r\n        <div className=\"info\">\r\n            <div className=\"socre\">Score: {score}</div>\r\n            <div className=\"time\">Time: {time}</div>\r\n            <div className=\"status\">Status: {gs} </div>\r\n            <div className=\"high-socre\">High Score: {hs}</div>\r\n          </div>\r\n    )\r\n}\r\nexport default InfoWrapper;","import { DIRECTIONS } from \"../constants\";\r\n\r\nfunction Control({handleControl,handleProcess}){\r\n    return (\r\n        <div className=\"control\">\r\n            <div className=\"btns\">\r\n              <button className=\"pause\" name=\"pause\" onClick={handleProcess}><span className=\"iconfont icon-ic_suspend\"></span></button>\r\n              <button className=\"restart\" name=\"restart\" onClick={handleProcess}><span className=\"iconfont icon-ic_refresh\"></span></button>\r\n              <button className=\"start\" name=\"start\" onClick={handleProcess}><span className=\"iconfont icon-ic_play\"></span></button>\r\n            </div>\r\n            <div className=\"operate\">\r\n              <button className=\"up\" name={DIRECTIONS.UP} onClick={handleControl}><span className=\"iconfont icon-ic_arrow_up\"></span></button>\r\n              <button className=\"down\" name={DIRECTIONS.BOTTOM} onClick={handleControl}><span className=\"iconfont icon-ic_arrow_down\"></span></button>\r\n              <button className=\"left\" name={DIRECTIONS.LEFT} onClick={handleControl}><span className=\"iconfont icon-ic_arrow_left\"></span></button>\r\n              <button className=\"right\" name={DIRECTIONS.RIGHT} onClick={handleControl}><span className=\"iconfont icon-ic_arrow_right\"></span></button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Control;","import Board from \"./Board\";\r\nimport InfoWrapper from \"./InfoWrapper\";\r\nimport Control from \"./Control\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { eatFood, eatSelf, getCurTime, getHighest, updateHighest } from \"../tools\";\r\nimport { DIRECTIONS, DIRECTION_TICKS, GAMESTATE, KEY_CODES_MAPPER } from \"../constants\";\r\nimport { getRandomCoordinate, getRandomFood, getSnakeHead, hitBorder } from \"../tools\";\r\n\r\nfunction Game(){\r\n    const [time,setTime]=useState(getCurTime());\r\n    const [highScore,setHighScore]=useState(getHighest());\r\n\r\n    const [snake,setSnake]=useState([getRandomCoordinate()]);\r\n    const [food,setFood]=useState(getRandomFood(snake));\r\n    const [score,setScore]=useState(0);\r\n    const [direction,setDirection]=useState(DIRECTIONS.UP);\r\n    const [gameState,setGameState]=useState(GAMESTATE.READY);\r\n\r\n\r\n    const restart=()=>{\r\n        setSnake([getRandomCoordinate()]);\r\n        setFood(getRandomFood(snake));\r\n        setScore(0);\r\n        setDirection(DIRECTIONS.UP);\r\n    }\r\n\r\n    //���Ʒ��� \r\n    const handleControl=({target})=>{\r\n        let {name}=target;\r\n        setDirection(name);\r\n    }\r\n\r\n    //���ƿ�ʼ/��ͣ/�ؿ� \r\n    const handleProcess=({target})=>{\r\n        let {name}=target;\r\n        switch(name){\r\n            case \"start\":\r\n                if(gameState!==GAMESTATE.OVER)\r\n                    setGameState(GAMESTATE.RUN);\r\n                break;\r\n            case \"pause\": \r\n                if(gameState!==GAMESTATE.OVER)\r\n                    setGameState(GAMESTATE.PAUSE);\r\n                break;\r\n            case \"restart\": setGameState(GAMESTATE.READY);restart();break;\r\n            default: setGameState(GAMESTATE.READY);break;\r\n        }\r\n    }\r\n    // ���̿��Ʒ���\r\n    const handleKeyBoardControl=({keyCode})=>{\r\n        setDirection(KEY_CODES_MAPPER[keyCode]);\r\n    \r\n    }\r\n    useEffect(()=>{\r\n        window.addEventListener(\"keyup\",handleKeyBoardControl,false);\r\n\r\n        return ()=>{\r\n            window.removeEventListener(\"keyup\",handleKeyBoardControl,false);\r\n        }\r\n    },[]);\r\n\r\n    //�߶�ʱǰ��\r\n    useEffect(()=>{\r\n        let timer=null;\r\n        if(gameState===GAMESTATE.RUN){\r\n            timer=setInterval(()=>{\r\n\r\n                let cur=getSnakeHead(snake);\r\n                let new_head=DIRECTION_TICKS[direction](cur.x,cur.y);\r\n                let new_snake=[...snake];\r\n                new_snake.unshift(new_head);\r\n                \r\n                if(hitBorder(new_snake)){\r\n                    setGameState(GAMESTATE.OVER);\r\n                    updateHighest(score,highScore);\r\n                    setHighScore(getHighest());\r\n                    clearInterval(timer);\r\n                    return;\r\n                }else{\r\n                    let eatSelfIdx=eatSelf(new_snake);\r\n                    if(eatSelfIdx!==-1){ //�Ե��ļ����ص����۷�\r\n                        setScore(prev=>Math.max(0,prev-2*(new_snake.length-eatSelfIdx)));\r\n                        new_snake=new_snake.slice(0,eatSelfIdx);\r\n                        \r\n                    }else{\r\n                        if(eatFood(new_snake,food)) { //�Ե�ʳ��ӷ֣���������ʳ��\r\n                            setFood(getRandomFood(new_snake));\r\n                            setScore(prev=>prev+new_snake.length);\r\n                        }else{\r\n                            new_snake.pop();\r\n                        }\r\n                    }\r\n                } \r\n                setSnake(new_snake);\r\n                \r\n            },200);\r\n        }\r\n        \r\n        return ()=>{\r\n            clearInterval(timer);\r\n        }\r\n    });\r\n\r\n    //���µ�ǰʱ��\r\n    useEffect(()=>{\r\n        let timer=setInterval(()=>{\r\n            let now=getCurTime();\r\n            setTime(now);\r\n            \r\n        },1000);\r\n        return ()=>{\r\n            clearInterval(timer);\r\n        }\r\n    });\r\n    return (\r\n        <div className=\"box\">\r\n            <main>\r\n                <h1>Snake Game in React</h1>\r\n                <Board \r\n                    snake={snake}\r\n                    food={food}\r\n                />\r\n                <div className=\"side\">\r\n                    <InfoWrapper \r\n                        time={time}\r\n                        score={score}\r\n                        hs={highScore}\r\n                        gs={gameState}\r\n                    />\r\n                    <Control \r\n                        handleControl={handleControl}\r\n                        handleProcess={handleProcess}\r\n                    />\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './font/iconfont.css';\nimport Game from './component/Game'\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}